// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import "lib/openzeppelin-contracts/contracts/access/Ownable.sol";

/**
 * @title PaymentToken
 * @author Hurls (Generated by AI)
 * @notice A basic ERC20 token for use in the Dollars contract.
 * Mints the initial supply to the deployer.
 */
contract PaymentToken is ERC20, Ownable {
    // The total number of tokens to be minted initially (1 million)
    uint256 public constant INITIAL_SUPPLY = 1_000_000 * (10 ** 18);

    /**
     * @notice Constructor: Sets token name and symbol, mints initial supply to deployer.
     * @param _owner The address that should receive the initial supply and ownership.
     */
    constructor(address _owner) ERC20("Payment Token", "PAY") Ownable() {
        require(_owner != address(0), "PaymentToken: Owner cannot be the zero address");
        _mint(_owner, INITIAL_SUPPLY);
        // Transfer ownership immediately to the provided owner address
        transferOwnership(_owner);
    }

    /**
     * @notice Allows the owner to mint additional tokens.
     * @param to The address to mint tokens to.
     * @param amount The amount of tokens to mint (in the smallest unit).
     * @dev Be cautious with minting additional tokens as it increases total supply.
     */
    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    /**
     * @notice Allows the owner to burn tokens from their own balance.
     * @param amount The amount of tokens to burn (in the smallest unit).
     */
    function burn(uint256 amount) external onlyOwner {
        _burn(msg.sender, amount);
    }

    /**
     * @notice Allows an address with allowance to burn tokens on behalf of the owner.
     * @param from The address whose tokens are being burned.
     * @param amount The amount of tokens to burn (in the smallest unit).
     * @dev Requires the caller to have an allowance set by `from`.
     */
    function burnFrom(address from, uint256 amount) external {
        // Requires allowance check which is implicitly handled by _burn
        _burn(from, amount);
    }
}
